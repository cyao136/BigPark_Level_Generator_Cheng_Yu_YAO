using System;
using BigPark_Level_Generator_Cheng_Yu_YAO;
using System.Collections.Generic;

namespace BigPark_Level_Generator_Cheng_Yu_YAO
{
	class MainClass
	{
        //Determines how much of the Level is actually generated
        private static double RATIO = 0.30;
        private static int ROOM_SIZE = 3;

        /// <summary>
        /// The main function where user interacts with the 
        /// program through the console.
        /// </summary>
        /// <param name="args"></param>
		public static void Main (string[] args)
		{
			int startRand = 100000000;
			int endRand = 1000000000;
			long seed;
			int outWidth;
			int outHeight;

			if (args.Length == 0) {
				Console.Write ("No seed?! Don't worry!\n" +
					"We will find the right one just for you.\n" +
					"Tell me how big do you want the seed to grow.\n" +
					"Width please: ");
				//User input width
				string inWidth = Console.ReadLine ();
				while (!int.TryParse(inWidth, out outWidth) || 
                    (int.Parse(inWidth) > 249) ||
                    (int.Parse(inWidth) < (ROOM_SIZE + 2)))
                {
					Console.Write ("That's not good, I don't have that kind of seed.\n" +
						"Only size less than 250 and greater than 4 are supported.\n" +
                        "Give me another dimension: ");
					inWidth = Console.ReadLine ();
				}

				Console.Write ("Good, good. Very good.\n" +
					"Now the height if you will: ");
				//User input height
				string inHeight = Console.ReadLine ();
				while (!int.TryParse(inHeight, out outHeight) || 
                    (int.Parse(inHeight) > 249) || 
                    (int.Parse(inWidth) < (ROOM_SIZE+2))) {
                        Console.Write("That's not good, I don't have that kind of seed.\n" +
                            "Only size less than 250 and greater than 4 are supported.\n" +
                        "Give me another dimension: ");
					inHeight = Console.ReadLine ();
				}

				Console.Write ("Very well, let me go grab that for you...\n");

				//Generate random seed to be used for map generation
				//Max = 249; 249*4 + 3 = 999 for parsing
				Random randomGen = new Random ();
				string widthStr = (outWidth * 4 + 3).ToString ().PadLeft (3, '0');
				string heightStr = (outHeight * 4 + 3).ToString ().PadLeft (3, '0');

				seed = randomGen.Next (startRand, endRand);
				string seedStr = seed.ToString () + widthStr + heightStr;
                Level level = generateLevel (seedStr);
				level.print();

                Console.Write("How do you like it? Beautiful isn't it?\n");


                restart();

			} else {
				if (args.Length == 2) {
					if (args [0] == "-s") {
						//If flag -s was specified
						if (long.TryParse (args [1], out seed) && (args [1].Length == 15)) {
							Console.Write ("IMPOSSIBLE!...\n" +
								"This is... this is... \n" +
                                "The Legendary Seed!\n");
                            Level level = generateLevel(args[1]);
                            level.print();
                            Console.Write("Oh nevermind, this wasn't the Legendary Seed.\n");

                            restart();

						} else {
							Console.Write ("You seed is dead!\n" +
								"Unable to grow it.\n" +
                                "Make sure it has 15 integers.\n");
							restart ();
						}
					} else {
						Console.Write ("Unsupported nutrient.\n" +
                            "Seed will not grow!\n" +
                                "Make sure it has 15 integers.\n");
						restart ();
					}
				} else {
					Console.Write ("Unsupported nutrient.\n" +
                        "Seed will not grow!\n" +
                                "Make sure it has 15 integers.\n");
					restart ();
				}
			}
		}

        /// <summary>
        /// Generates a level from a given seed
        /// </summary>
        /// <param name="inSeed"></param>
        /// <returns>A level generated by the seed</returns>
		private static Level generateLevel (string inSeed)
		{
			int width = 0;
			int height = 0;
			string seed;
			processSeed (inSeed, out width, out height, out seed);

            if (width < (ROOM_SIZE + 1))
            {
                width = (ROOM_SIZE + 1);
            }
            if (height < (ROOM_SIZE + 1))
            {
                height = (ROOM_SIZE + 1);
            }
            //Create rooms
            List<Room> rooms = generateRooms(seed, width, height);
            //Console.Write("DEBUG: List of Added Rooms: " + rooms.Count.ToString());

			return new Level(width,height,rooms);
		}

        /// <summary>
        /// Generates rooms with a given seed and size of the level
        /// </summary>
        /// <param name="seed"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <returns>A list of generated Room</returns>
        private static List<Room> generateRooms(string seed, int width, int height)
        {
            List<Room> rooms = new List<Room>();
            int iMultiplierX = int.Parse(seed.Substring(0, 3));
            int iMultiplierY = int.Parse(seed.Substring(3, 3));
            long intSeed = long.Parse(seed);
            long numRooms = (long)Math.Ceiling(((width * height) * RATIO)/ (ROOM_SIZE * ROOM_SIZE));
            //Console.Write("DEBUG: Number of Rooms: " + numRooms.ToString());
            for (long i = 0; i < numRooms; i++)
            {
                long startX;
                long startY;
                int wallPaddingX = width - (ROOM_SIZE + 2);
                int wallPaddingY = height - (ROOM_SIZE + 2);
                //Algorithm to determine the starting point of room
                //My own Hash-like function
                //There are probably more effective ones out there, but this is mine and it works!
                if (wallPaddingX > 0)
                {
                    startX = 1 + (((i * (long)(iMultiplierX + i)) + (intSeed - i)) % wallPaddingX);
                }
                else
                {
                    startX = 1;
                }
                if (wallPaddingY > 0)
                {
                    startY = 1 + (((i * (long)(iMultiplierY + i)) + (intSeed - i)) % wallPaddingY);
                }
                else
                {
                    startY = 1;
                }
                Room newRoom = new Room((int)startX, (int)startY, (int)(startX + ROOM_SIZE), (int)(startY + ROOM_SIZE));
                rooms.Add(newRoom);
            }

                return rooms;
        }
        /// <summary>
        /// Processes the seed by extracting the width, height and rest of the seed
        /// for use in generation methods.
        /// </summary>
        /// <param name="inSeed"></param>
        /// <param name="outWidth"></param>
        /// <param name="outHeight"></param>
        /// <param name="outSeed"></param>
		private static void processSeed (string inSeed, out int outWidth, out int outHeight, out string outSeed)
		{
			Console.WriteLine ("\n Watering your seed...\n");
			outWidth = (int)Math.Floor ((double)((int.Parse (inSeed.Substring (9, 3)) - 3) / 4));
			outHeight = (int)Math.Floor ((double)((int.Parse (inSeed.Substring (12, 3)) - 3) / 4));
			outSeed = inSeed;
			
			Console.Write ("Seed grown:\n" +
				"Number: " + inSeed + "\n" +
				"Width: " + outWidth.ToString () + "\n" +
				"Height: " + outHeight.ToString () + "\n" +
				"Difficulty: Hell\n");

		}
        /// <summary>
        /// Provide user with option to restart the program.
        /// </summary>
		private static void restart ()
		{
			Console.Write ("\n\"r\" to plant another seed.\n" +
				"Other keys to cut ALL the grown seeds: ");
			if (Console.ReadLine () == "r" ||
                Console.ReadLine () == "R")
            {
				Console.Write ("What is your seed's name?\n" + 
                    "No seed? Just press Enter.\n");
				string input = Console.ReadLine ();
				if (input == "") {
					string[] newArg = new string[0];
					Main (newArg);
				} else {
					string[] newArg = new string[2];
					newArg [0] = "-s";
					newArg [1] = input;
					Main (newArg);
				}
			}
		}

	}
}
